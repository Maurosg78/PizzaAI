name: Repository Setup - Part 2
on: workflow_dispatch

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Create More Issues
        uses: actions/github-script@v5
        env:
          GH_PAT: ${{ secrets.GH_TOKEN }}
        with:
          script: |
            async function getMilestoneId(title) {
              const milestones = await github.rest.issues.listMilestones({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'open'
              });
              
              const milestone = milestones.data.find(m => m.title.includes(title));
              return milestone ? milestone.number : null;
            }

            const sprint1Id = await getMilestoneId('Sprint 1');
            const sprint2Id = await getMilestoneId('Sprint 2');
            const sprint3Id = await getMilestoneId('Sprint 3');

            const issues = [
              {
                title: 'üìä Setup de Monitoreo y Logging',
                body: '## Descripci√≥n\nConfigurar el sistema de monitoreo y logging para la aplicaci√≥n.\n\n## Tareas\n- [ ] Implementar logging estructurado\n- [ ] Configurar m√©tricas de aplicaci√≥n\n- [ ] Implementar trazabilidad distribuida\n- [ ] Configurar dashboards de monitoreo\n\n## Criterios de Aceptaci√≥n\n- Sistema de logging implementado y funcionando\n- M√©tricas siendo recolectadas\n- Dashboards configurados y mostrando datos',
                milestone: sprint1Id,
                labels: ['monitoring', 'infrastructure']
              },
              {
                title: 'üóÑÔ∏è Dise√±o e Implementaci√≥n del Modelo de Datos',
                body: `## Objetivo\nDise√±ar e implementar el modelo de datos para el sistema de recomendaci√≥n.\n\n## Tareas\n### Dise√±o del Esquema\n- [ ] Modelos de usuario\n- [ ] Modelos de recetas\n- [ ] Modelos de ingredientes\n\n### Sistema de Persistencia\n- [ ] Configuraci√≥n de PostgreSQL\n- [ ] Migraciones\n- [ ] √çndices y optimizaciones`,
                milestone: sprint2Id,
                labels: ['backend', 'high-priority']
              },
              {
                title: 'üîå Desarrollo de API Core',
                body: `## Objetivo\nImplementar la API REST para el sistema.\n\n## Tareas\n### Endpoints B√°sicos\n- [ ] CRUD de usuarios\n- [ ] CRUD de recetas\n- [ ] CRUD de ingredientes\n\n### Sistema de Autenticaci√≥n\n- [ ] JWT implementation\n- [ ] Roles y permisos\n- [ ] Rate limiting\n\n### Documentaci√≥n API\n- [ ] OpenAPI/Swagger\n- [ ] Postman collection\n- [ ] Ejemplos de uso`,
                milestone: sprint2Id,
                labels: ['backend', 'high-priority']
              },
              {
                title: 'üßÆ Implementaci√≥n del Motor de Recomendaci√≥n',
                body: `## Objetivo\nDesarrollar el sistema de recomendaci√≥n de recetas.\n\n## Tareas\n### Integraci√≥n USDA\n- [ ] Cliente API\n- [ ] Cach√© de datos\n- [ ] Sincronizaci√≥n\n\n### Algoritmo de Recomendaci√≥n\n- [ ] L√≥gica base\n- [ ] Filtros y ordenamiento\n- [ ] Personalizaci√≥n\n\n### Sistema de Cach√©\n- [ ] Configuraci√≥n Redis\n- [ ] Estrategias de cach√©\n- [ ] Invalidaci√≥n`,
                milestone: sprint2Id,
                labels: ['backend', 'high-priority']
              },
              {
                title: 'üé® Desarrollo del Dashboard',
                body: `## Objetivo\nCrear una interfaz de usuario moderna y funcional.\n\n## Tareas\n### Dise√±o UI/UX\n- [ ] Wireframes\n- [ ] Componentes base\n- [ ] Tema y estilos\n\n### Implementaci√≥n Frontend\n- [ ] Setup React\n- [ ] Routing\n- [ ] Estado global\n\n### Integraci√≥n API\n- [ ] Cliente HTTP\n- [ ] Manejo de errores\n- [ ] Loading states`,
                milestone: sprint3Id,
                labels: ['frontend', 'high-priority']
              },
              {
                title: 'üìà Implementaci√≥n del Sistema de Monitoreo en Producci√≥n',
                body: `## Objetivo\nImplementar un sistema completo de monitoreo para producci√≥n.\n\n## Tareas\n### M√©tricas de Negocio\n- [ ] KPIs\n- [ ] Reportes\n- [ ] Analytics\n\n### Sistema de Alertas\n- [ ] Configuraci√≥n\n- [ ] Notificaciones\n- [ ] Escalamiento\n\n### Dashboard Operacional\n- [ ] M√©tricas en tiempo real\n- [ ] Logs centralizados\n- [ ] Estado del sistema`,
                milestone: sprint3Id,
                labels: ['monitoring', 'medium-priority']
              }
            ];

            for (const issue of issues) {
              try {
                await github.rest.issues.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: issue.title,
                  body: issue.body,
                  milestone: issue.milestone,
                  labels: issue.labels
                });
                console.log(`Created issue: ${issue.title}`);
              } catch (error) {
                console.error(`Error creating issue ${issue.title}: ${error}`);
              }
            } 